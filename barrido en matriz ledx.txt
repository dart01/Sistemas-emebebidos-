
int A[] =     {0b111111111,
							 0b100000000, 
							 0b111100110, 
							 0b111100110, 	
               0b111100110, 
				       0b111100110, 
							 0b100000000, 
						   0b111111111
};
int B[] =     {0b100011001,
							 0b000000000, 
							 0b011100110, 
							 0b011100110, 	
               0b011100110, 
				       0b011100110, 
							 0b000000000, 
						   0b111111111
};
int C[] =     {0b111111111,
							 0b011111110, 
							 0b011111110, 
							 0b011111110, 	
               0b011111110, 
				       0b011111110, 
							 0b000000000, 
						   0b111111111
};
int D[] =     {0b100000001,
							 0b000000000, 
							 0b001111100, 
							 0b011111110, 	
               0b011111110, 
				       0b011111110, 
							 0b000000000, 
						   0b111111111
};
int E[] =     {0b111111111,
							 0b011100110, 
							 0b011100110, 
							 0b011100110, 	
               0b011100110, 
				       0b011100110, 
							 0b000000000, 
						   0b11111111
};
int F[] =     {0b111111111,
							 0b111110110, 
							 0b111110110, 
							 0b111110110, 	
               0b111110110, 
				       0b111110110, 
							 0b000000000, 
						   0b111111111
};
int G[] =     {0b111111111,
							 0b000001110, 
							 0b011101110, 
							 0b011101110, 	
               0b011111110, 
				       0b011111110, 
							 0b000000000, 
						   0b111111111
};
int H[] =     {0b111111111,
							 0b000000000, 
							 0b111100111, 
							 0b111100111, 	
               0b111100111, 
				       0b111100111, 
							 0b000000000, 
						   0b111111111
};
int I[] =     {0b111111111,
							 0b011111110, 
							 0b011111110, 
							 0b000000000, 	
               0b000000000, 
				       0b011111110, 
							 0b011111110, 
						   0b111111111
};
int J[] =     {0b111111111,
							 0b111111110, 
							 0b111111110, 
							 0b000000000, 	
               0b011111110, 
				       0b000001110, 
							 0b111111110, 
						   0b111111111
};
int K[] =     {0b111111111,
							 0b011111110, 
							 0b101111101, 
							 0b110111011, 	
               0b111010111, 
				       0b111101111, 
							 0b000000000, 
						   0b111111111
};
int L[] =     {0b111111111,
							 0b111111111, 
							 0b011111111, 
							 0b011111111, 	
               0b011111111, 
				       0b011111111, 
							 0b000000000, 
						   0b111111111
};
int M[] =     {0b111111111,
							 0b111111111, 
							 0b000000000, 
							 0b111111101, 	
               0b111111011, 
				       0b111111101, 
							 0b000000000, 
						   0b111111111
};
int N[] =     {0b111111111,
							 0b000000000, 
							 0b100111111, 
							 0b111001111, 	
               0b111000111, 
				       0b111111001, 
							 0b000000000, 
						   0b111111111
};
int O[] =     {0b111111111,
							 0b000000000, 
							 0b011111110, 
							 0b011111110, 	
               0b011111110, 
				       0b011111110, 
							 0b000000000, 
						   0b111111111
};
int P[] =     {0b111111111,
							 0b111111111, 
							 0b111110000, 
							 0b111110110, 	
               0b111110110, 
				       0b111110110, 
							 0b000000000, 
						   0b111111111
};
int Q[] =     {0b111111111,
							 0b101111111, 
							 0b110000000, 
							 0b110111110, 	
               0b110101110, 
				       0b110111110, 
							 0b110000000, 
						   0b111111111
};
int R[] =     {0b11111111,
							 0b11111111, 
							 0b001110000, 
							 0b110110110, 	
               0b111000110, 
				       0b111100110, 
							 0b000000000, 
						   0b111111111
};
int S[] =     {0b111111111,
							 0b000000110, 
							 0b011110110, 
							 0b011110110, 	
               0b011110110, 
				       0b011110110, 
							 0b011110000, 
						   0b111111111
};
int T[] =     {0b111111110,
							 0b111111110, 
							 0b111111110, 
							 0b000000000, 	
               0b000000000, 
				       0b111111110, 
							 0b111111110, 
						   0b111111110
};
int U[] =     {0b111111111,
							 0b000000000, 
							 0b011111111, 
							 0b011111111, 	
               0b011111111, 
				       0b011111111, 
							 0b000000000, 
						   0b111111111
};
int W[] =     {0b111111111,
							 0b000000000, 
							 0b011111111, 
							 0b000000000, 	
               0b000000000, 
				       0b011111111, 
							 0b000000000, 
						   0b111111111
};
int X[] =     {0b111111111,
							 0b011111110, 
							 0b001111100, 
							 0b110010011, 	
               0b111000111, 
				       0b110010011, 
							 0b001111100, 
						   0b011111110
};



int j=0;
void Delay (uint32_t time)
{
	//while (time--);  
	for (int t=0;t<time;t++);

}

void letra(void);

int main(){

	RCC->AHB1ENR |= (1<<1)|(1<<2)|(1<<3) |(1<<4) |(1<<5)|(1<<6); //Enable the GPIOB clock and GPIOC and GPIOD (user led LD1 is connected to PB0)
	//RCC->AHB1ENR |= (1<<3); //Enable the GPIOD clock 
	//RCC->AHB1ENR |= (1<<2); //Enable the GPIOC clock (user push button B1 is connected to PC13)
	
	//GPIOB->MODER &= ~(0b11<<0); //clear (00) pin PB0(bits 1:0) and set as Input (00) for default 
	//GPIOB->MODER |= (1<<0); //pin PB0(bits 1:0) as Output (01)
	GPIOB->MODER &= ~(0xff<<0); //clear (00) pin PB0(bits 1:0) and set as Input (00) for default 
	GPIOB->MODER |= (1<<0) |(1<<2)|(1<<4)|(1<<6)|(1<<8)|(1<<10)|(1<<12)|(1<<14); //pin PB0(bits 1:0) as Output (01)
	
	//GPIOC->MODER &= ~(0b11<<26);
	GPIOC->MODER &= ~(0xffff<<0); //clear (00) pin PD0(bits 1:0) and set as Input (00) for default 
	GPIOC->MODER |= (1<<0) |(1<<2) |(1<<4)|(1<<6)|(1<<8)|(1<<10)|(1<<12)|(1<<14) |(1<<16) |(1<<18) |(1<<20)|(1<<22)|(1<<24)|(1<<26)|(1<<28)|(1<<30);
	GPIOF->MODER &= ~(0<<0); //clear (00) pin PB0(bits 1:0) and set as Input (00) for default 
	GPIOF->MODER |= (1<<0) |(1<<2)|(1<<4)|(1<<6)|(1<<8)|(1<<10)|(1<<12)|(1<<14)|(1<<16)|(1<<18);
	
	GPIOB->OTYPER &= ~(1<<0) &~(1<<1) &~(1<<2) &~(1<<3) &~(1<<4) &~(1<<5) &~(1<<6 )&~(1<<7) &~(1<<8);  // clear (0) pin PB0 (bit 0) --> Output push pull (HIGH or LOW)
	GPIOC->OTYPER	&= ~(1<<0) &~(1<<1) & ~(1<<2) & ~(1<<3) & ~(1<<4) & ~(1<<5) & ~(1<<6) & ~(1<<7) &~(1<<8) & ~(1<<9) & ~(1<<10) & ~(1<<11) & ~(1<<12) & ~(1<<13) & ~(1<<14) &~(1<<15) ;
	GPIOF->OTYPER &= ~(1<<0) &~(1<<1) &~(1<<2)&~(1<<3)&~(1<<4)&~(1<<5)&~(1<<6)&~(1<<7)&~(1<<8)&~(1<<9);
	
	GPIOB->OSPEEDR |= (0xffff<<0);//(0b11<<0)  // Pin PB0 (bits 1:0) as Very High Speed (11)
	//GPIOB->OSPEEDR |= ((1<<15)|(1<<14));	// Pin PB7 (bits 15:14) as Very High Speed (11)
	GPIOC->OSPEEDR |= (0xffff<<0);
	GPIOF->OSPEEDR |= (0Xfff<<0);
	
	 GPIOB->PUPDR &= ~(0b11<<0); //~((1<<1)|(1<<0)) // Pin PB0 (bits 1:0) are 0:0 --> no pull up or pull down
	//GPIOC->PUPDR &= ~(0b11<<26); //~((1<<27)|(1<<26)) // Pin PC13 (bits 27:26) are 0:0 --> no pull up or pull down
	//GPIOC->PUPDR |= (1<<27); // Pin PC_13 (bits 27:26) are 1:0 --> pull down for default
	GPIOC->PUPDR &= ~(0xffff<<0); //~((1<<27)|(1<<26)) // Pin PC13 (bits 27:26) are 0:0 --> no pull up or pull down
	GPIOF->PUPDR &= ~(0xfff<<0);
	
	
	
	while(1){
				// "puerto: pin Display" mtriz 1
				//pc0=13, PC1=3 ,PC2=4 ,PC3=10,PC6=6 ,PC7=11 ,PC8=15 ,PC9=16 ;
				//PF0=9, PF1=14 , PF2=8 , PF3=12 , PF4=1 , PF6=7 , PF7= 2, PF8=5
				letra();
				
				
			
	  }
  }

	
	void letra(void){
		while(j<50){
					
				for (int columna = 0; columna<= 8; columna++) {	
						GPIOF->ODR = C[columna];					
						GPIOC->ODR = desplazamiento[columna];
						Delay(1000);

				}j++;
		 }j=0;
	}
		